/****************************************************************************
Modification History:
*****************************************************************************
Date		Author		Description
*****************************************************************************
04/11/2007	brian.kuhn		Created SyndicationHeader Class
****************************************************************************/
using System;
using System.Globalization;
using System.Net;
using System.Xml.Serialization;

namespace DotNetSlave.BlogEngine.BusinessLogic.Syndication
{
    /// <summary>
    /// Represents the HTTP headers that can be associated to a syndicated resource.
    /// </summary>
    [Serializable()]
    public class SyndicationHeader
    {
        //============================================================
        //	PUBLIC/PRIVATE/PROTECTED MEMBERS
        //============================================================
        #region PRIVATE/PROTECTED/PUBLIC MEMBERS
        /// <summary>
        /// Private member to hold the URI used to request the response for the syndication resource.
        /// </summary>
        private Uri headerSource;
        /// <summary>
        /// Private member to hold the current value for the requested variant.
        /// </summary>
        private string headerETag               = String.Empty;
        /// <summary>
        /// Private member to hold the date and time at which the accompanying body data was last modified.
        /// </summary>
        private string headerLastModified       = String.Empty;
        /// <summary>
        /// Private member to hold the range that is accepted by the server.
        /// </summary>
        private string headerAcceptRanges       = String.Empty;
        /// <summary>
        /// Private member to hold the time, in seconds, since the response was generated by the originating server.
        /// </summary>
        private long headerAge;
        /// <summary>
        /// Private member to hold the set of HTTP methods that are supported.
        /// </summary>
        private string headerAllow              = String.Empty;
        /// <summary>
        /// Private member to hold caching directives that must be obeyed by all caching mechanisms along the request/response chain.
        /// </summary>
        private string headerCacheControl       = String.Empty;
        /// <summary>
        /// Private member to hold options that are desired for a particular connection.
        /// </summary>
        private string headerConnection         = String.Empty;
        /// <summary>
        /// Private member to hold the encodings that have been applied to the accompanying body data.
        /// </summary>
        private string headerContentEncoding    = String.Empty;
        /// <summary>
        /// Private member to hold the natural language or languages of the accompanying body data.
        /// </summary>
        private string headerContentLanguage    = String.Empty;
        /// <summary>
        /// Private member to hold the length, in bytes, of the accompanying body data.
        /// </summary>
        private long headerContentLength;
        /// <summary>
        /// Private member to hold a URI from which the accompanying body can be obtained.
        /// </summary>
        private Uri headerContentLocation;
        /// <summary>
        /// Private member to hold the MD5 digest of the accompanying body data, for the purpose of providing an end-to-end message integrity check.
        /// </summary>
        private string headerContentMd5         = String.Empty;
        /// <summary>
        /// Private member to hold the subrange or subranges of the response that the client requests be returned in lieu of the entire response.
        /// </summary>
        private string headerContentRange       = String.Empty;
        /// <summary>
        /// Private member to hold the MIME type of the accompanying body data.
        /// </summary>
        private string headerContentType        = String.Empty;
        /// <summary>
        /// Private member to hold the date and time at which the response originated.
        /// </summary>
        private string headerDate               = String.Empty;
        /// <summary>
        /// Private member to hold the date and time after which the accompanying body data should be considered stale.
        /// </summary>
        private string headerExpires            = String.Empty;
        /// <summary>
        /// Private member to hold a URI to which the client is redirected to obtain the requested resource.
        /// </summary>
        private Uri headerLocation;
        /// <summary>
        /// Private member to hold implementation-specific directives that might apply to any agent along the request/response chain.
        /// </summary>
        private string headerPragma             = String.Empty;
        /// <summary>
        /// Private member to hold a value which specifies that the client must authenticate itself to a proxy.
        /// </summary>
        private string headerProxyAuthenticate  = String.Empty;
        /// <summary>
        /// Private member to hold a time (in seconds), or a date and time, after which the client can retry its request.
        /// </summary>
        private string headerRetryAfter         = String.Empty;
        /// <summary>
        /// Private member to hold information about the originating server agent.
        /// </summary>
        private string headerServer             = String.Empty;
        /// <summary>
        /// Private member to hold cookie data that is presented to the client.
        /// </summary>
        private string headerSetCookie          = String.Empty;
        /// <summary>
        /// Private member to hold a value which specifies what (if any) type of transformation has been applied to the message body.
        /// </summary>
        private string headerTransferEncoding   = String.Empty;
        /// <summary>
        /// Private member to hold additional communications protocols that the client supports.
        /// </summary>
        private string headerUpgrade            = String.Empty;
        /// <summary>
        /// Private member to hold the request headers that are used to determine whether a cached response is fresh.
        /// </summary>
        private string headerVary               = String.Empty;
        /// <summary>
        /// Private member to hold intermediate protocols to be used by gateway and proxy agents.
        /// </summary>
        private string headerVia                = String.Empty;
        /// <summary>
        /// Private member to hold additional information about that status or transformation of a message that might not be reflected in the message.
        /// </summary>
        private string headerWarning            = String.Empty;
        /// <summary>
        /// Private member to hold a value which specifies that the client must authenticate itself to the server.
        /// </summary>
        private string headerWwwAuthenticate    = String.Empty;
        #endregion

        //============================================================
        //	CONSTRUCTORS
        //============================================================
        #region SyndicationHeader()
        /// <summary>
        /// Initializes a new instance of the <see cref="SyndicationHeader"/> class.
        /// </summary>
        public SyndicationHeader()
        {
            //------------------------------------------------------------
            //	Attempt to initialize class state
            //------------------------------------------------------------
            try
            {
                //------------------------------------------------------------
                //	
                //------------------------------------------------------------
                
            }
            catch
            {
                //------------------------------------------------------------
                //	Rethrow exception
                //------------------------------------------------------------
                throw;
            }
        }
        #endregion

        #region SyndicationHeader(WebHeaderCollection headers)
        /// <summary>
        /// Initializes a new instance of the <see cref="SyndicationHeader"/> class.
        /// </summary>
        /// <param name="uri">The URI used to request the response.</param>
        /// <param name="headers">A collection of HTTP header name/value pairs associated with a response.</param>
        public SyndicationHeader(Uri uri, WebHeaderCollection headers)
        {
            //------------------------------------------------------------
            //	Attempt to initialize class state
            //------------------------------------------------------------
            try
            {
                //------------------------------------------------------------
                //	Validate parameters
                //------------------------------------------------------------
                if (uri == null)
                {
                    throw new ArgumentNullException("uri");
                }
                if (headers == null)
                {
                    throw new ArgumentNullException("headers");
                }

                //------------------------------------------------------------
                //	Set URI associated to the response headers.
                //------------------------------------------------------------
                this.Source = uri.ToString();

                //------------------------------------------------------------
                //	Initialize class state using supplied headers
                //------------------------------------------------------------
                ExtractHeaderInformationCommon(headers);
                ExtractHeaderInformationExtended(headers);
            }
            catch
            {
                //------------------------------------------------------------
                //	Rethrow exception
                //------------------------------------------------------------
                throw;
            }
        }
        #endregion

        //============================================================
        //	PUBLIC PROPERTIES
        //============================================================
        #region AcceptRanges
        /// <summary>
        /// Gets or sets the range that is accepted by the server.
        /// </summary>
        /// <value>The range that is accepted by the server.</value>
        [XmlElement(ElementName = "AcceptRanges", Type = typeof(System.String))]
        public string AcceptRanges
        {
            get
            {
                return headerAcceptRanges;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerAcceptRanges = String.Empty;
                }
                else
                {
                    headerAcceptRanges = value;
                }
            }
        }
        #endregion

        #region Age
        /// <summary>
        /// Gets or sets the time, in seconds, since the response was generated by the originating server.
        /// </summary>
        /// <value>The time, in seconds, since the response was generated by the originating server.</value>
        [XmlElement(ElementName = "Age", Type = typeof(System.Int64))]
        public long Age
        {
            get
            {
                return headerAge;
            }

            set
            {
                headerAge = value;
            }
        }
        #endregion

        #region Allow
        /// <summary>
        /// Gets or sets the set of HTTP methods that are supported.
        /// </summary>
        /// <value>The set of HTTP methods that are supported.</value>
        [XmlElement(ElementName = "Allow", Type = typeof(System.String))]
        public string Allow
        {
            get
            {
                return headerAllow;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerAllow = String.Empty;
                }
                else
                {
                    headerAllow = value;
                }
            }
        }
        #endregion

        #region CacheControl
        /// <summary>
        /// Gets or sets the caching directives that must be obeyed by all caching mechanisms along the request/response chain.
        /// </summary>
        /// <value>The caching directives that must be obeyed by all caching mechanisms along the request/response chain.</value>
        [XmlElement(ElementName = "CacheControl", Type = typeof(System.String))]
        public string CacheControl
        {
            get
            {
                return headerCacheControl;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerCacheControl = String.Empty;
                }
                else
                {
                    headerCacheControl = value;
                }
            }
        }
        #endregion

        #region Connection
        /// <summary>
        /// Gets or sets the options that are desired for a particular connection.
        /// </summary>
        /// <value>The options that are desired for a particular connection.</value>
        [XmlElement(ElementName = "Connection", Type = typeof(System.String))]
        public string Connection
        {
            get
            {
                return headerConnection;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerConnection = String.Empty;
                }
                else
                {
                    headerConnection = value;
                }
            }
        }
        #endregion

        #region ContentEncoding
        /// <summary>
        /// Gets or sets the encodings that have been applied to the accompanying body data.
        /// </summary>
        /// <value>The encodings that have been applied to the accompanying body data.</value>
        [XmlElement(ElementName = "ContentEncoding", Type = typeof(System.String))]
        public string ContentEncoding
        {
            get
            {
                return headerContentEncoding;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerContentEncoding = String.Empty;
                }
                else
                {
                    headerContentEncoding = value;
                }
            }
        }
        #endregion

        #region ContentLanguage
        /// <summary>
        /// Gets or sets the natural language or languages of the accompanying body data.
        /// </summary>
        /// <value>The natural language or languages of the accompanying body data.</value>
        [XmlElement(ElementName = "ContentLanguage", Type = typeof(System.String))]
        public string ContentLanguage
        {
            get
            {
                return headerContentLanguage;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerContentLanguage = String.Empty;
                }
                else
                {
                    headerContentLanguage = value;
                }
            }
        }
        #endregion

        #region ContentLength
        /// <summary>
        /// Gets or sets the length, in bytes, of the accompanying body data.
        /// </summary>
        /// <value>The length, in bytes, of the accompanying body data.</value>
        [XmlElement(ElementName = "ContentLength", Type = typeof(System.Int64))]
        public long ContentLength
        {
            get
            {
                return headerContentLength;
            }

            set
            {
                headerContentLength = value;
            }
        }
        #endregion

        #region ContentLocation
        /// <summary>
        /// Gets or sets a URI from which the accompanying body can be obtained.
        /// </summary>
        /// <value>A URI from which the accompanying body can be obtained.</value>
        [XmlElement(ElementName = "ContentLocation", Type = typeof(System.String))]
        public string ContentLocation
        {
            get
            {
                if (headerContentLocation != null)
                {
                    return headerContentLocation.ToString();
                }
                else
                {
                    return String.Empty;
                }
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerContentLocation = null;
                }
                else
                {
                    headerContentLocation = new Uri(value);
                }
            }
        }
        #endregion

        #region ContentMd5
        /// <summary>
        /// Gets or sets the MD5 digest of the accompanying body data, for the purpose of providing an end-to-end message integrity check.
        /// </summary>
        /// <value>The MD5 digest of the accompanying body data, for the purpose of providing an end-to-end message integrity check.</value>
        [XmlElement(ElementName = "ContentMd5", Type = typeof(System.String))]
        public string ContentMd5
        {
            get
            {
                return headerContentMd5;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerContentMd5 = String.Empty;
                }
                else
                {
                    headerContentMd5 = value;
                }
            }
        }
        #endregion

        #region ContentRange
        /// <summary>
        /// Gets or sets the subrange or subranges of the response that the client requests be returned in lieu of the entire response.
        /// </summary>
        /// <value>The subrange or subranges of the response that the client requests be returned in lieu of the entire response.</value>
        [XmlElement(ElementName = "ContentRange", Type = typeof(System.String))]
        public string ContentRange
        {
            get
            {
                return headerContentRange;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerContentRange = String.Empty;
                }
                else
                {
                    headerContentRange = value;
                }
            }
        }
        #endregion

        #region ContentType
        /// <summary>
        /// Gets or sets the MIME type of the accompanying body data.
        /// </summary>
        /// <value>The MIME type of the accompanying body data.</value>
        [XmlElement(ElementName = "ContentType", Type = typeof(System.String))]
        public string ContentType
        {
            get
            {
                return headerContentType;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerContentType = String.Empty;
                }
                else
                {
                    headerContentType = value;
                }
            }
        }
        #endregion

        #region Date
        /// <summary>
        /// Gets or sets the date and time at which the response originated.
        /// </summary>
        /// <value>The date and time at which the response originated.</value>
        [XmlElement(ElementName = "Date", Type = typeof(System.String))]
        public string Date
        {
            get
            {
                return headerDate;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerDate = String.Empty;
                }
                else
                {
                    headerDate = value;
                }
            }
        }
        #endregion

        #region ETag
        /// <summary>
        /// Gets or sets the current value for the requested variant.
        /// </summary>
        /// <value>The current value for the requested variant.</value>
        [XmlElement(ElementName = "ETag", Type = typeof(System.String))]
        public string ETag
        {
            get
            {
                return headerETag;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerETag = String.Empty;
                }
                else
                {
                    headerETag = value;
                }
            }
        }
        #endregion

        #region Expires
        /// <summary>
        /// Gets or sets the date and time after which the accompanying body data should be considered stale.
        /// </summary>
        /// <value>The date and time after which the accompanying body data should be considered stale.</value>
        [XmlElement(ElementName = "Expires", Type = typeof(System.String))]
        public string Expires
        {
            get
            {
                return headerExpires;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerExpires = String.Empty;
                }
                else
                {
                    headerExpires = value;
                }
            }
        }
        #endregion

        #region LastModified
        /// <summary>
        /// Gets or sets the date and time at which the accompanying body data was last modified.
        /// </summary>
        /// <value>The date and time at which the accompanying body data was last modified.</value>
        [XmlElement(ElementName = "LastModified", Type = typeof(System.String))]
        public string LastModified
        {
            get
            {
                return headerLastModified;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerLastModified = String.Empty;
                }
                else
                {
                    headerLastModified = value;
                }
            }
        }
        #endregion

        #region Location
        /// <summary>
        /// Gets or sets a URI to which the client is redirected to obtain the requested resource.
        /// </summary>
        /// <value>A URI to which the client is redirected to obtain the requested resource.</value>
        [XmlElement(ElementName = "Location", Type = typeof(System.String))]
        public string Location
        {
            get
            {
                if (headerLocation != null)
                {
                    return headerLocation.ToString();
                }
                else
                {
                    return String.Empty;
                }
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerLocation = null;
                }
                else
                {
                    headerLocation = new Uri(value);
                }
            }
        }
        #endregion

        #region Pragma
        /// <summary>
        /// Gets or sets the implementation-specific directives that might apply to any agent along the request/response chain.
        /// </summary>
        /// <value>The implementation-specific directives that might apply to any agent along the request/response chain.</value>
        [XmlElement(ElementName = "Pragma", Type = typeof(System.String))]
        public string Pragma
        {
            get
            {
                return headerPragma;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerPragma = String.Empty;
                }
                else
                {
                    headerPragma = value;
                }
            }
        }
        #endregion

        #region ProxyAuthenticate
        /// <summary>
        /// Gets or sets a value which specifies that the client must authenticate itself to a proxy.
        /// </summary>
        /// <value>A value which specifies that the client must authenticate itself to a proxy.</value>
        [XmlElement(ElementName = "ProxyAuthenticate", Type = typeof(System.String))]
        public string ProxyAuthenticate
        {
            get
            {
                return headerProxyAuthenticate;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerProxyAuthenticate = String.Empty;
                }
                else
                {
                    headerProxyAuthenticate = value;
                }
            }
        }
        #endregion

        #region RetryAfter
        /// <summary>
        /// Gets or sets a time (in seconds), or a date and time, after which the client can retry its request.
        /// </summary>
        /// <value>A time (in seconds), or a date and time, after which the client can retry its request.</value>
        [XmlElement(ElementName = "RetryAfter", Type = typeof(System.String))]
        public string RetryAfter
        {
            get
            {
                return headerRetryAfter;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerRetryAfter = String.Empty;
                }
                else
                {
                    headerRetryAfter = value;
                }
            }
        }
        #endregion

        #region Server
        /// <summary>
        /// Gets or sets the information about the originating server agent.
        /// </summary>
        /// <value>The information about the originating server agent.</value>
        [XmlElement(ElementName = "Server", Type = typeof(System.String))]
        public string Server
        {
            get
            {
                return headerServer;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerServer = String.Empty;
                }
                else
                {
                    headerServer = value;
                }
            }
        }
        #endregion

        #region SetCookie
        /// <summary>
        /// Gets or sets the cookie data that is presented to the client.
        /// </summary>
        /// <value>The cookie data that is presented to the client.</value>
        [XmlElement(ElementName = "SetCookie", Type = typeof(System.String))]
        public string SetCookie
        {
            get
            {
                return headerSetCookie;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerSetCookie = String.Empty;
                }
                else
                {
                    headerSetCookie = value;
                }
            }
        }
        #endregion

        #region Source
        /// <summary>
        /// Gets or sets the URI used to request the response for the syndication resource.
        /// </summary>
        /// <value>The URI used to request the response for the syndication resource.</value>
        [XmlAttribute(AttributeName = "source", DataType = "string")]
        public string Source
        {
            get
            {
                return headerSource.ToString();
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    throw new ArgumentNullException("value");
                }
                else
                {
                    headerSource    = new Uri(value);
                }
            }
        }
        #endregion

        #region TransferEncoding
        /// <summary>
        /// Gets or sets a value which specifies what (if any) type of transformation has been applied to the message body.
        /// </summary>
        /// <value>A value which specifies what (if any) type of transformation has been applied to the message body.</value>
        [XmlElement(ElementName = "TransferEncoding", Type = typeof(System.String))]
        public string TransferEncoding
        {
            get
            {
                return headerTransferEncoding;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerTransferEncoding = String.Empty;
                }
                else
                {
                    headerTransferEncoding = value;
                }
            }
        }
        #endregion

        #region Upgrade
        /// <summary>
        /// Gets or sets the additional communications protocols that the client supports.
        /// </summary>
        /// <value>The additional communications protocols that the client supports.</value>
        [XmlElement(ElementName = "Upgrade", Type = typeof(System.String))]
        public string Upgrade
        {
            get
            {
                return headerUpgrade;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerUpgrade = String.Empty;
                }
                else
                {
                    headerUpgrade = value;
                }
            }
        }
        #endregion

        #region Vary
        /// <summary>
        /// Gets or sets the request headers that are used to determine whether a cached response is fresh.
        /// </summary>
        /// <value>The request headers that are used to determine whether a cached response is fresh.</value>
        [XmlElement(ElementName = "Vary", Type = typeof(System.String))]
        public string Vary
        {
            get
            {
                return headerVary;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerVary = String.Empty;
                }
                else
                {
                    headerVary = value;
                }
            }
        }
        #endregion

        #region Via
        /// <summary>
        /// Gets or sets the intermediate protocols to be used by gateway and proxy agents.
        /// </summary>
        /// <value>The intermediate protocols to be used by gateway and proxy agents.</value>
        [XmlElement(ElementName = "Via", Type = typeof(System.String))]
        public string Via
        {
            get
            {
                return headerVia;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerVia = String.Empty;
                }
                else
                {
                    headerVia = value;
                }
            }
        }
        #endregion

        #region Warning
        /// <summary>
        /// Gets or sets the additional information about that status or transformation of a message that might not be reflected in the message.
        /// </summary>
        /// <value>The additional information about that status or transformation of a message that might not be reflected in the message.</value>
        [XmlElement(ElementName = "Warning", Type = typeof(System.String))]
        public string Warning
        {
            get
            {
                return headerWarning;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerWarning = String.Empty;
                }
                else
                {
                    headerWarning = value;
                }
            }
        }
        #endregion

        #region WwwAuthenticate
        /// <summary>
        /// Gets or sets a value which specifies that the client must authenticate itself to the server.
        /// </summary>
        /// <value>A value which specifies that the client must authenticate itself to the server.</value>
        [XmlElement(ElementName = "WwwAuthenticate", Type = typeof(System.String))]
        public string WwwAuthenticate
        {
            get
            {
                return headerWwwAuthenticate;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    headerWwwAuthenticate = String.Empty;
                }
                else
                {
                    headerWwwAuthenticate = value;
                }
            }
        }
        #endregion

        //============================================================
        //	PRIVATE ROUTINES
        //============================================================
        #region ExtractHeaderInformationCommon(WebHeaderCollection headers)
        /// <summary>
        /// Initializes class state by extracting common header information from specified collection.
        /// </summary>
        /// <param name="headers">The collection to extract information from.</param>
        private void ExtractHeaderInformationCommon(WebHeaderCollection headers)
        {
            //------------------------------------------------------------
            //	Attempt to extract information from header collection
            //------------------------------------------------------------
            try
            {
                //------------------------------------------------------------
                //	Validate parameters
                //------------------------------------------------------------
                if (headers == null)
                {
                    throw new ArgumentNullException("headers");
                }

                //------------------------------------------------------------
                //	Enumerate through header keys
                //------------------------------------------------------------
                foreach (string headerKey in headers.Keys)
                {
                    //------------------------------------------------------------
                    //	Format key
                    //------------------------------------------------------------
                    string key  = headerKey.ToLowerInvariant();

                    //------------------------------------------------------------
                    //	Set class properties
                    //------------------------------------------------------------
                    if (SyndicationHeader.StringsAreSame(key, "accept-ranges"))
                    {
                        this.AcceptRanges       = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "content-length"))
                    {
                        this.ContentLength      = Convert.ToInt64(headers.Get(key), CultureInfo.InvariantCulture);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "content-type"))
                    {
                        this.ContentType        = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "date"))
                    {
                        this.Date               = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "etag"))
                    {
                        this.ETag               = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "last-modified"))
                    {
                        this.LastModified       = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "server"))
                    {
                        this.Server             = headers.Get(key);
                    }
                }
            }
            catch
            {
                //------------------------------------------------------------
                //	Rethrow exception
                //------------------------------------------------------------
                throw;
            }
        }
        #endregion

        #region ExtractHeaderInformationExtended(WebHeaderCollection headers)
        /// <summary>
        /// Initializes class state by extracting extended header information from specified collection.
        /// </summary>
        /// <param name="headers">The collection to extract information from.</param>
        private void ExtractHeaderInformationExtended(WebHeaderCollection headers)
        {
            //------------------------------------------------------------
            //	Attempt to extract information from header collection
            //------------------------------------------------------------
            try
            {
                //------------------------------------------------------------
                //	Validate parameters
                //------------------------------------------------------------
                if (headers == null)
                {
                    throw new ArgumentNullException("headers");
                }

                //------------------------------------------------------------
                //	Enumerate through header keys
                //------------------------------------------------------------
                foreach (string headerKey in headers.Keys)
                {
                    //------------------------------------------------------------
                    //	Format key
                    //------------------------------------------------------------
                    string key  = headerKey.ToLowerInvariant();

                    //------------------------------------------------------------
                    //	Set class properties
                    //------------------------------------------------------------                   
                    if (SyndicationHeader.StringsAreSame(key, "age"))
                    {
                        this.Age                = Convert.ToInt64(headers.Get(key), CultureInfo.InvariantCulture);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "allow"))
                    {
                        this.Allow              = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "cache-control"))
                    {
                        this.CacheControl       = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "connection"))
                    {
                        this.Connection         = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "content-encoding"))
                    {
                        this.ContentEncoding    = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "content-language"))
                    {
                        this.ContentLanguage    = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "content-location"))
                    {
                        this.ContentLocation    = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "content-md5"))
                    {
                        this.ContentMd5         = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "content-range"))
                    {
                        this.ContentRange       = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "expires"))
                    {
                        this.Expires            = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "location"))
                    {
                        this.Location           = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "pragma"))
                    {
                        this.Pragma             = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "proxy-authenticate"))
                    {
                        this.ProxyAuthenticate  = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "retry-after"))
                    {
                        this.RetryAfter         = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "set-cookie"))
                    {
                        this.SetCookie          = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "transfer-encoding"))
                    {
                        this.TransferEncoding   = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "upgrade"))
                    {
                        this.Upgrade            = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "vary"))
                    {
                        this.Vary               = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "via"))
                    {
                        this.Via                = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "warning"))
                    {
                        this.Warning            = headers.Get(key);
                    }
                    else if (SyndicationHeader.StringsAreSame(key, "www-authenticate"))
                    {
                        this.WwwAuthenticate    = headers.Get(key);
                    }
                }
            }
            catch
            {
                //------------------------------------------------------------
                //	Rethrow exception
                //------------------------------------------------------------
                throw;
            }
        }
        #endregion

        #region StringsAreSame(string string1, string string2)
        /// <summary>
        /// Returns a value indicating if strings are the same.
        /// </summary>
        /// <param name="string1">The string to be compared.</param>
        /// <param name="string2">The string to compare with.</param>
        /// <returns>true if strings are the same regardless of casing, otherwise false.</returns>
        private static bool StringsAreSame(string string1, string string2)
        {
            //------------------------------------------------------------
            //	Attempt to determine if strings match
            //------------------------------------------------------------
            try
            {
                //------------------------------------------------------------
                //	Determine if strings are identical
                //------------------------------------------------------------
                if (String.Compare(string1, string2, true, CultureInfo.InvariantCulture) == 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                //------------------------------------------------------------
                //	Rethrow exception
                //------------------------------------------------------------
                throw;
            }
        }
        #endregion
    }
}
