namespace BlogEngine.Core.API.MetaWeblog
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;
    using System.Text;
    using System.Web;
    using System.Xml;

    /// <summary>
    /// Obejct is the incoming XML-RPC Request.  Handles parsing the XML-RPC and 
    ///     fills its properties with the values sent in the request.
    /// </summary>
    internal class XMLRPCRequest
    {
        #region Constants and Fields

        /// <summary>
        /// The app key.
        /// </summary>
        private string _appKey;

        /// <summary>
        /// The blog id.
        /// </summary>
        private string _blogID;

        /// <summary>
        /// The input params.
        /// </summary>
        private List<XmlNode> _inputParams;

        /// <summary>
        /// The media.
        /// </summary>
        private MWAMediaObject _media;

        /// <summary>
        /// The method name.
        /// </summary>
        private string _methodName;

        /// <summary>
        /// The number of posts.
        /// </summary>
        private int _numberOfPosts;

        /// <summary>
        /// The page.
        /// </summary>
        private MWAPage _page;

        /// <summary>
        /// The page id.
        /// </summary>
        private string _pageID;

        /// <summary>
        /// The password.
        /// </summary>
        private string _password;

        /// <summary>
        /// The post.
        /// </summary>
        private MWAPost _post;

        /// <summary>
        /// The post id.
        /// </summary>
        private string _postID;

        /// <summary>
        /// The publish.
        /// </summary>
        private bool _publish;

        /// <summary>
        /// The user name.
        /// </summary>
        private string _userName;

        #endregion

        #region Constructors and Destructors

        /// <summary>
        /// Initializes a new instance of the <see cref="XMLRPCRequest"/> class. 
        /// Loads XMLRPCRequest object from HttpContext
        /// </summary>
        /// <param name="input">
        /// incoming HttpContext
        /// </param>
        public XMLRPCRequest(HttpContext input)
        {
            var inputXML = this.ParseRequest(input);

            // LogMetaWeblogCall(inputXML);
            this.LoadXMLRequest(inputXML); // Loads Method Call and Associated Variables
        }

        #endregion

        #region Properties

        /// <summary>
        ///     AppKey is a key generated by the calling application.  It is sent with blogger API calls.
        /// </summary>
        /// <remarks>
        ///     BlogEngine.NET doesn't require specific AppKeys for API calls.  It is no longer standard practive.
        /// </remarks>
        public string AppKey
        {
            get
            {
                return this._appKey;
            }
        }

        /// <summary>
        ///     ID of the Blog to call the function on.  Since BlogEngine supports only a single blog instance,
        ///     this incoming parameter is not used.
        /// </summary>
        public string BlogID
        {
            get
            {
                return this._blogID;
            }
        }

        /// <summary>
        ///     MediaObject is a struct sent by the metaWeblog.newMediaObject function.
        ///     It contains information about the media and the object in a bit array.
        /// </summary>
        public MWAMediaObject MediaObject
        {
            get
            {
                return this._media;
            }
        }

        /// <summary>
        ///     Name of Called Metaweblog Function
        /// </summary>
        public string MethodName
        {
            get
            {
                return this._methodName;
            }
        }

        /// <summary>
        ///     Number of post request by the metaWeblog.getRecentPosts function
        /// </summary>
        public int NumberOfPosts
        {
            get
            {
                return this._numberOfPosts;
            }
        }

        /// <summary>
        ///     Metaweblog Page Struct
        /// </summary>
        public MWAPage Page
        {
            get
            {
                return this._page;
            }
        }

        /// <summary>
        ///     PageID Guid in string format
        /// </summary>
        public string PageID
        {
            get
            {
                return this._pageID;
            }
        }

        /// <summary>
        ///     Password for user validation
        /// </summary>
        public string Password
        {
            get
            {
                return this._password;
            }
        }

        /// <summary>
        ///     Metaweblog Post struct containing information post including title, content, and categories.
        /// </summary>
        public MWAPost Post
        {
            get
            {
                return this._post;
            }
        }

        /// <summary>
        ///     The PostID Guid in string format
        /// </summary>
        public string PostID
        {
            get
            {
                return this._postID;
            }
        }

        /// <summary>
        ///     Publish determines wheter or not a post will be marked as published by BlogEngine.
        /// </summary>
        public bool Publish
        {
            get
            {
                return this._publish;
            }
        }

        /// <summary>
        ///     Login for user validation
        /// </summary>
        public string UserName
        {
            get
            {
                return this._userName;
            }
        }

        #endregion

        #region Methods

        /// <summary>
        /// Creates a Metaweblog Media object from the XML struct
        /// </summary>
        /// <param name="node">
        /// XML contains a Metaweblog MediaObject Struct
        /// </param>
        /// <returns>
        /// Metaweblog MediaObject Struct Obejct
        /// </returns>
        private MWAMediaObject GetMediaObject(XmlNode node)
        {
            var temp = new MWAMediaObject();
            temp.name = node.SelectSingleNode("value/struct/member[name='name']").LastChild.InnerText;
            if (node.SelectSingleNode("value/struct/member[name='type']") == null)
            {
                temp.type = "notsent";
            }
            else
            {
                temp.type = node.SelectSingleNode("value/struct/member[name='type']").LastChild.InnerText;
            }

            temp.bits =
                Convert.FromBase64String(node.SelectSingleNode("value/struct/member[name='bits']").LastChild.InnerText);

            return temp;
        }

        /// <summary>
        /// Creates a Metaweblog Page object from the XML struct
        /// </summary>
        /// <param name="node">
        /// XML contains a Metaweblog Page Struct
        /// </param>
        /// <returns>
        /// Metaweblog Page Struct Obejct
        /// </returns>
        private MWAPage GetPage(XmlNode node)
        {
            var temp = new MWAPage();

            // Require Title and Description
            try
            {
                temp.title = node.SelectSingleNode("value/struct/member[name='title']").LastChild.InnerText;
                temp.description = node.SelectSingleNode("value/struct/member[name='description']").LastChild.InnerText;
            }
            catch (Exception ex)
            {
                throw new MetaWeblogException(
                    "06", "Page Struct Element, Title or Description,  not Sent. (" + ex.Message + ")");
            }

            if (node.SelectSingleNode("value/struct/member[name='link']") == null)
            {
                temp.link = string.Empty;
            }
            else
            {
                temp.link = node.SelectSingleNode("value/struct/member[name='link']").LastChild.InnerText;
            }

            if (node.SelectSingleNode("value/struct/member[name='dateCreated']") != null)
            {
                try
                {
                    var tempDate = node.SelectSingleNode("value/struct/member[name='dateCreated']").LastChild.InnerText;
                    temp.pageDate = DateTime.ParseExact(
                        tempDate, 
                        "yyyyMMdd'T'HH':'mm':'ss", 
                        CultureInfo.InvariantCulture, 
                        DateTimeStyles.AssumeUniversal);
                }
                catch
                {
                    // Ignore PubDate Error
                }
            }

            // Keywords
            if (node.SelectSingleNode("value/struct/member[name='mt_keywords']") == null)
            {
                temp.mt_keywords = string.Empty;
            }
            else
            {
                temp.mt_keywords = node.SelectSingleNode("value/struct/member[name='mt_keywords']").LastChild.InnerText;
            }

            if (node.SelectSingleNode("value/struct/member[name='wp_page_parent_id']") != null)
            {
                temp.pageParentID =
                    node.SelectSingleNode("value/struct/member[name='wp_page_parent_id']").LastChild.InnerText;
            }

            return temp;
        }

        /// <summary>
        /// Creates a Metaweblog Post object from the XML struct
        /// </summary>
        /// <param name="node">
        /// XML contains a Metaweblog Post Struct
        /// </param>
        /// <returns>
        /// Metaweblog Post Struct Obejct
        /// </returns>
        private MWAPost GetPost(XmlNode node)
        {
            var temp = new MWAPost();
            var cats = new List<string>();
            var tags = new List<string>();

            // Require Title and Description
            try
            {
                temp.title = node.SelectSingleNode("value/struct/member[name='title']").LastChild.InnerText;
                temp.description = node.SelectSingleNode("value/struct/member[name='description']").LastChild.InnerText;
            }
            catch (Exception ex)
            {
                throw new MetaWeblogException(
                    "05", "Post Struct Element, Title or Description,  not Sent. (" + ex.Message + ")");
            }

            if (node.SelectSingleNode("value/struct/member[name='link']") == null)
            {
                temp.link = string.Empty;
            }
            else
            {
                temp.link = node.SelectSingleNode("value/struct/member[name='link']").LastChild.InnerText;
            }

            if (node.SelectSingleNode("value/struct/member[name='mt_allow_comments']") == null)
            {
                temp.commentPolicy = string.Empty;
            }
            else
            {
                temp.commentPolicy =
                    node.SelectSingleNode("value/struct/member[name='mt_allow_comments']").LastChild.InnerText;
            }

            if (node.SelectSingleNode("value/struct/member[name='mt_excerpt']") == null)
            {
                temp.excerpt = string.Empty;
            }
            else
            {
                temp.excerpt = node.SelectSingleNode("value/struct/member[name='mt_excerpt']").LastChild.InnerText;
            }

            if (node.SelectSingleNode("value/struct/member[name='wp_slug']") == null)
            {
                temp.slug = string.Empty;
            }
            else
            {
                temp.slug = node.SelectSingleNode("value/struct/member[name='wp_slug']").LastChild.InnerText;
            }

            if (node.SelectSingleNode("value/struct/member[name='wp_author_id']") == null)
            {
                temp.author = string.Empty;
            }
            else
            {
                temp.author = node.SelectSingleNode("value/struct/member[name='wp_author_id']").LastChild.InnerText;
            }

            if (node.SelectSingleNode("value/struct/member[name='categories']") != null)
            {
                var categoryArray = node.SelectSingleNode("value/struct/member[name='categories']").LastChild;
                foreach (XmlNode catnode in categoryArray.SelectNodes("array/data/value/string"))
                {
                    cats.Add(catnode.InnerText);
                }
            }

            temp.categories = cats;

            // postDate has a few different names to worry about
            if (node.SelectSingleNode("value/struct/member[name='dateCreated']") != null)
            {
                try
                {
                    var tempDate = node.SelectSingleNode("value/struct/member[name='dateCreated']").LastChild.InnerText;
                    temp.postDate = DateTime.ParseExact(
                        tempDate, 
                        "yyyyMMdd'T'HH':'mm':'ss", 
                        CultureInfo.InvariantCulture, 
                        DateTimeStyles.AssumeUniversal);
                }
                catch
                {
                    // Ignore PubDate Error
                }
            }
            else if (node.SelectSingleNode("value/struct/member[name='pubDate']") != null)
            {
                try
                {
                    var tempPubDate = node.SelectSingleNode("value/struct/member[name='pubDate']").LastChild.InnerText;
                    temp.postDate = DateTime.ParseExact(
                        tempPubDate, 
                        "yyyyMMdd'T'HH':'mm':'ss", 
                        CultureInfo.InvariantCulture, 
                        DateTimeStyles.AssumeUniversal);
                }
                catch
                {
                    // Ignore PubDate Error
                }
            }

            // WLW tags implementation using mt_keywords
            if (node.SelectSingleNode("value/struct/member[name='mt_keywords']") != null)
            {
                var tagsList = node.SelectSingleNode("value/struct/member[name='mt_keywords']").LastChild.InnerText;
                foreach (var item in tagsList.Split(','))
                {
                    if (
                        string.IsNullOrEmpty(
                            tags.Find(
                                delegate(string t) { return t.Equals(item.Trim(), StringComparison.OrdinalIgnoreCase); })))
                    {
                        tags.Add(item.Trim());
                    }
                }
            }

            temp.tags = tags;

            return temp;
        }

        /// <summary>
        /// Loads object properties with contents of passed xml
        /// </summary>
        /// <param name="xml">
        /// xml doc with methodname and parameters
        /// </param>
        private void LoadXMLRequest(string xml)
        {
            var request = new XmlDocument();
            try
            {
                if (!(xml.StartsWith("<?xml") || xml.StartsWith("<method")))
                {
                    xml = xml.Substring(xml.IndexOf("<?xml"));
                }

                request.LoadXml(xml);
            }
            catch (Exception ex)
            {
                throw new MetaWeblogException("01", "Invalid XMLRPC Request. (" + ex.Message + ")");
            }

            // Method name is always first
            this._methodName = request.DocumentElement.ChildNodes[0].InnerText;

            // Parameters are next (and last)
            this._inputParams = new List<XmlNode>();
            foreach (XmlNode node in request.SelectNodes("/methodCall/params/param"))
            {
                this._inputParams.Add(node);
            }

            // Determine what params are what by method name
            switch (this._methodName)
            {
                case "metaWeblog.newPost":
                    this._blogID = this._inputParams[0].InnerText;
                    this._userName = this._inputParams[1].InnerText;
                    this._password = this._inputParams[2].InnerText;
                    this._post = this.GetPost(this._inputParams[3]);
                    if (this._inputParams[4].InnerText == "0" || this._inputParams[4].InnerText == "false")
                    {
                        this._publish = false;
                    }
                    else
                    {
                        this._publish = true;
                    }

                    break;
                case "metaWeblog.editPost":
                    this._postID = this._inputParams[0].InnerText;
                    this._userName = this._inputParams[1].InnerText;
                    this._password = this._inputParams[2].InnerText;
                    this._post = this.GetPost(this._inputParams[3]);
                    if (this._inputParams[4].InnerText == "0" || this._inputParams[4].InnerText == "false")
                    {
                        this._publish = false;
                    }
                    else
                    {
                        this._publish = true;
                    }

                    break;
                case "metaWeblog.getPost":
                    this._postID = this._inputParams[0].InnerText;
                    this._userName = this._inputParams[1].InnerText;
                    this._password = this._inputParams[2].InnerText;
                    break;
                case "metaWeblog.newMediaObject":
                    this._blogID = this._inputParams[0].InnerText;
                    this._userName = this._inputParams[1].InnerText;
                    this._password = this._inputParams[2].InnerText;
                    this._media = this.GetMediaObject(this._inputParams[3]);
                    break;
                case "metaWeblog.getCategories":
                case "wp.getAuthors":
                case "wp.getPageList":
                case "wp.getPages":
                case "wp.getTags":
                    this._blogID = this._inputParams[0].InnerText;
                    this._userName = this._inputParams[1].InnerText;
                    this._password = this._inputParams[2].InnerText;
                    break;
                case "metaWeblog.getRecentPosts":
                    this._blogID = this._inputParams[0].InnerText;
                    this._userName = this._inputParams[1].InnerText;
                    this._password = this._inputParams[2].InnerText;
                    this._numberOfPosts = Int32.Parse(this._inputParams[3].InnerText, CultureInfo.InvariantCulture);
                    break;
                case "blogger.getUsersBlogs":
                case "metaWeblog.getUsersBlogs":
                    this._appKey = this._inputParams[0].InnerText;
                    this._userName = this._inputParams[1].InnerText;
                    this._password = this._inputParams[2].InnerText;
                    break;
                case "blogger.deletePost":
                    this._appKey = this._inputParams[0].InnerText;
                    this._postID = this._inputParams[1].InnerText;
                    this._userName = this._inputParams[2].InnerText;
                    this._password = this._inputParams[3].InnerText;
                    if (this._inputParams[4].InnerText == "0" || this._inputParams[4].InnerText == "false")
                    {
                        this._publish = false;
                    }
                    else
                    {
                        this._publish = true;
                    }

                    break;
                case "blogger.getUserInfo":
                    this._appKey = this._inputParams[0].InnerText;
                    this._userName = this._inputParams[1].InnerText;
                    this._password = this._inputParams[2].InnerText;
                    break;
                case "wp.newPage":
                    this._blogID = this._inputParams[0].InnerText;
                    this._userName = this._inputParams[1].InnerText;
                    this._password = this._inputParams[2].InnerText;
                    this._page = this.GetPage(this._inputParams[3]);
                    if (this._inputParams[4].InnerText == "0" || this._inputParams[4].InnerText == "false")
                    {
                        this._publish = false;
                    }
                    else
                    {
                        this._publish = true;
                    }

                    break;
                case "wp.getPage":
                    this._blogID = this._inputParams[0].InnerText;
                    this._pageID = this._inputParams[1].InnerText;
                    this._userName = this._inputParams[2].InnerText;
                    this._password = this._inputParams[3].InnerText;
                    break;
                case "wp.editPage":
                    this._blogID = this._inputParams[0].InnerText;
                    this._pageID = this._inputParams[1].InnerText;
                    this._userName = this._inputParams[2].InnerText;
                    this._password = this._inputParams[3].InnerText;
                    this._page = this.GetPage(this._inputParams[4]);
                    if (this._inputParams[5].InnerText == "0" || this._inputParams[5].InnerText == "false")
                    {
                        this._publish = false;
                    }
                    else
                    {
                        this._publish = true;
                    }

                    break;
                case "wp.deletePage":
                    this._blogID = this._inputParams[0].InnerText;
                    this._userName = this._inputParams[1].InnerText;
                    this._password = this._inputParams[2].InnerText;
                    this._pageID = this._inputParams[3].InnerText;
                    break;
                default:
                    throw new MetaWeblogException("02", "Unknown Method. (" + this._methodName + ")");
            }
        }

        /// <summary>
        /// The log meta weblog call.
        /// </summary>
        /// <param name="message">
        /// The message.
        /// </param>
        private void LogMetaWeblogCall(string message)
        {
            var saveFolder = HttpContext.Current.Server.MapPath(BlogSettings.Instance.StorageLocation);
            var saveFile = Path.Combine(saveFolder, "lastmetaweblogcall.txt");

            try
            {
                // Save message to file
                using (var fileWrtr = new FileStream(saveFile, FileMode.OpenOrCreate, FileAccess.Write))
                {
                    using (var streamWrtr = new StreamWriter(fileWrtr))
                    {
                        streamWrtr.WriteLine(message);
                        streamWrtr.Close();
                    }

                    fileWrtr.Close();
                }
            }
            catch
            {
                // Ignore all errors
            }
        }

        /// <summary>
        /// Retrieves the content of the input stream
        ///     and return it as plain text.
        /// </summary>
        /// <param name="context">
        /// The context.
        /// </param>
        /// <returns>
        /// The parse request.
        /// </returns>
        private string ParseRequest(HttpContext context)
        {
            var buffer = new byte[context.Request.InputStream.Length];
            context.Request.InputStream.Read(buffer, 0, buffer.Length);

            return Encoding.UTF8.GetString(buffer);
        }

        #endregion
    }
}