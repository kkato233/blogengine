<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>Admin</author>
  <title>Syntax Highligting on Server Side (aka Code Format Rendering)</title>
  <description />
  <content>&lt;p&gt;
Here is the code being used as and Extension to render code. 
&lt;/p&gt;
&lt;p&gt;
The format is [ code:lang; ln=on|off; alt=on|off ] all of your code [/code].&amp;nbsp; NO SPACES, I have to use spaces so it will render.&amp;nbsp; The extention keeps taking out the demo.&amp;nbsp; I am tinkering with the format because I am curious if there will be a need for other options.&amp;nbsp; Like forcing&amp;nbsp; a block display so that the code wraps, does not wrap, etc.&amp;nbsp; the 
&lt;/p&gt;
&lt;p&gt;
Replace LANG in &amp;quot;[ code:lang ]&amp;quot;&amp;nbsp; with the options c#, vb, js, html, xml, tsql, or msh.&amp;nbsp;&amp;nbsp;&amp;lt;--Sets language&lt;br /&gt;
Set LN= to on or off &amp;lt;-- Sets line numbers&lt;br /&gt;
Set ALT= to on or off &amp;lt;-- Sets alternating background line colors. 
&lt;/p&gt;
&lt;p&gt;
The system handles the rest. 
&lt;/p&gt;
&lt;p&gt;
By the way you need the current builds or need to add the style sheet additions at the end of the post. 
&lt;/p&gt;
&lt;p&gt;
[code:c#] 
&lt;/p&gt;
&lt;p&gt;
#region using 
&lt;/p&gt;
&lt;p&gt;
using System;&lt;br /&gt;
using System.IO;&lt;br /&gt;
using System.Web;&lt;br /&gt;
using System.Text.RegularExpressions;&lt;br /&gt;
using BlogEngine.Core;&lt;br /&gt;
using BlogEngine.Core.Web;&lt;br /&gt;
using CodeFormatter; 
&lt;/p&gt;
&lt;p&gt;
#endregion 
&lt;/p&gt;
&lt;p&gt;
&lt;br /&gt;
/// &amp;lt;summary&amp;gt;&lt;br /&gt;
/// &amp;lt;/summary&amp;gt;&lt;br /&gt;
/// &amp;lt;remarks&amp;gt;&lt;br /&gt;
/// It is a work in progress.....&lt;br /&gt;
/// &amp;lt;/remarks&amp;gt;&lt;br /&gt;
[Extension(&amp;quot;Changes &amp;lt;code:lang&amp;gt;&amp;lt;/code&amp;gt;.&amp;nbsp; Adapted from Jean-Claude Manoli [jc@manoli.net].&amp;quot;, &amp;quot;0.0.0.1&amp;quot;, &amp;quot;&lt;a href="http://www.manoli.net/"&gt;http://www.manoli.net/&lt;/a&gt;&amp;quot;)]&lt;br /&gt;
public class CodeFormatters&lt;br /&gt;
{ 
&lt;/p&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; private enum CodeLanguages&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; csharp, vb, js, html, xml, tsql, msh&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; } 
&lt;/p&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; public CodeFormatters()&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Post.Serving += new EventHandler&amp;lt;ServingEventArgs&amp;gt;(Post_Serving);&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; } 
&lt;/p&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; void Post_Serving(object sender, ServingEventArgs e)&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; /*&amp;nbsp; It supports the following.&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * C#&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * VB&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * JS&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * HTML&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * XML&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * T-SQL&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * MSH (code name Monad) --I don&amp;#39;t have a clue.&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!string.IsNullOrEmpty(e.Body))&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; e.Body = _CSharpRegex.Replace(e.Body, new MatchEvaluator(MatchEval));&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; e.Body = _VBRegex.Replace(e.Body, new MatchEvaluator(MatchEval));&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; } 
&lt;/p&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;} 
&lt;/p&gt;
&lt;p&gt;
[/code] 
&lt;/p&gt;
&lt;p&gt;
[code:c#;ln=on] 
&lt;/p&gt;
&lt;p&gt;
#region using 
&lt;/p&gt;
&lt;p&gt;
using System;&lt;br /&gt;
using System.IO;&lt;br /&gt;
using System.Web;&lt;br /&gt;
using System.Text.RegularExpressions;&lt;br /&gt;
using BlogEngine.Core;&lt;br /&gt;
using BlogEngine.Core.Web;&lt;br /&gt;
using CodeFormatter; 
&lt;/p&gt;
&lt;p&gt;
#endregion 
&lt;/p&gt;
&lt;p&gt;
&lt;br /&gt;
/// &amp;lt;summary&amp;gt;&lt;br /&gt;
/// &amp;lt;/summary&amp;gt;&lt;br /&gt;
/// &amp;lt;remarks&amp;gt;&lt;br /&gt;
/// It is a work in progress.....&lt;br /&gt;
/// &amp;lt;/remarks&amp;gt;&lt;br /&gt;
[Extension(&amp;quot;Changes &amp;lt;code:lang&amp;gt;&amp;lt;/code&amp;gt;.&amp;nbsp; Adapted from Jean-Claude Manoli [jc@manoli.net].&amp;quot;, &amp;quot;0.0.0.1&amp;quot;, &amp;quot;&lt;a href="http://www.manoli.net/"&gt;http://www.manoli.net/&lt;/a&gt;&amp;quot;)]&lt;br /&gt;
public class CodeFormatters&lt;br /&gt;
{ 
&lt;/p&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; private enum CodeLanguages&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; csharp, vb, js, html, xml, tsql, msh&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; } 
&lt;/p&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; public CodeFormatters()&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Post.Serving += new EventHandler&amp;lt;ServingEventArgs&amp;gt;(Post_Serving);&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; } 
&lt;/p&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; void Post_Serving(object sender, ServingEventArgs e)&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; /*&amp;nbsp; It supports the following.&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * C#&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * VB&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * JS&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * HTML&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * XML&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * T-SQL&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * MSH (code name Monad) --I don&amp;#39;t have a clue.&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!string.IsNullOrEmpty(e.Body))&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; e.Body = _CSharpRegex.Replace(e.Body, new MatchEvaluator(MatchEval));&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; e.Body = _VBRegex.Replace(e.Body, new MatchEvaluator(MatchEval));&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; } 
&lt;/p&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;} 
&lt;/p&gt;
&lt;p&gt;
[/code] 
&lt;/p&gt;
&lt;p&gt;
[code:c#;ln=off] 
&lt;/p&gt;
&lt;p&gt;
private string CodeEvaluator(Match match) 
&lt;/p&gt;
&lt;p&gt;
{ 
&lt;/p&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!match.Success) 
&lt;/p&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; return match.Value; 
&lt;/p&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; HighlightOptions options = new HighlightOptions(); 
&lt;/p&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; options.Language = match.Groups[&amp;quot;lang&amp;quot;].Value; 
&lt;/p&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; options.Code = match.Groups[&amp;quot;code&amp;quot;].Value; 
&lt;/p&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; options.DisplayLineNumbers = match.Groups[&amp;quot;linenumbers&amp;quot;].Value == &amp;quot;on&amp;quot; ? true : false; 
&lt;/p&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; options.Title = match.Groups[&amp;quot;title&amp;quot;].Value; 
&lt;/p&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; options.AlternateLineNumbers = match.Groups[&amp;quot;altlinenumbers&amp;quot;].Value == &amp;quot;on&amp;quot; ? true : false; 
&lt;/p&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; return Highlight(options, match.Value); 
&lt;/p&gt;
&lt;p&gt;
} 
&lt;/p&gt;
&lt;p&gt;
[/code] 
&lt;/p&gt;
</content>
  <ispublished>True</ispublished>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2007-08-13 21:09:00</pubDate>
  <lastModified>2007-09-13 16:22:05</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>test code</slug>
  <tags />
  <comments />
  <categories />
  <notifications />
</post>